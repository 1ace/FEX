name: Build + Test

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release
  CC: clang
  CXX: clang++

jobs:
  build:
    runs-on: ${{ matrix.arch }}
    strategy:
      matrix:
        arch: [[self-hosted, x64], [self-hosted, ARMv8.0], [self-hosted, ARMv8.2]]
      fail-fast: false

    steps:
    - uses: actions/checkout@v2

    - name : submodule checkout
      # Need to update submodules
      run: git submodule update --init --depth 1

    - name: Clean Build Environment
      run: rm -Rf ${{runner.workspace}}/build

    - name: Create Build Environment
      # Some projects don't allow in-source building, so create a separate build directory
      # We'll use this as our working directory for all subsequent commands
      run: cmake -E make_directory ${{runner.workspace}}/build

    - name: Configure CMake
      # Use a bash shell so we can use the same syntax for environment variable
      # access regardless of the host operating system
      shell: bash
      working-directory: ${{runner.workspace}}/build
      # Note the current convention is to use the -S and -B options here to specify source
      # and build directories, but this is only available with CMake 3.13 and higher.
      # The CMake binaries on the Github Actions machines are (as of this writing) 3.12
      run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=$BUILD_TYPE -G Ninja -DENABLE_LTO=False -DENABLE_ASSERTIONS=True

    - name: Build
      working-directory: ${{runner.workspace}}/build
      shell: bash
      # Execute the build.  You can specify a specific target with "--target <NAME>"
      run: cmake --build . --config $BUILD_TYPE

    - name: ASM Tests
      working-directory: ${{runner.workspace}}/build
      shell: bash
      # Execute the unit tests
      run: cmake --build . --config $BUILD_TYPE --target asm_tests

    - name: IR Tests
      working-directory: ${{runner.workspace}}/build
      shell: bash
      # Execute the unit tests
      run: cmake --build . --config $BUILD_TYPE --target ir_tests

    - name: Posix Tests
      working-directory: ${{runner.workspace}}/build
      shell: bash
      # Execute the posixtest
      run: cmake --build . --config $BUILD_TYPE --target posix_tests

    - name: gvisor tests
      working-directory: ${{runner.workspace}}/build
      shell: bash
      # Execute the gvisor tests
      run: cmake --build . --config $BUILD_TYPE --target gvisor_tests

    - name: gcc target tests 32
      working-directory: ${{runner.workspace}}/build
      shell: bash
      # Execute the gvisor tests
      run: cmake --build . --config $BUILD_TYPE --target gcc_target_tests_32

    - name: gcc target tests 64
      working-directory: ${{runner.workspace}}/build
      shell: bash
      # Execute the gvisor tests
      run: cmake --build . --config $BUILD_TYPE --target gcc_target_tests_64

